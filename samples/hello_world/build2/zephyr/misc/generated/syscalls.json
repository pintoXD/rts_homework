[
    [
        "dma.h",
        "_handler_dma_start",
        "K_SYSCALL_DECLARE2(K_SYSCALL_DMA_START, dma_start, int, struct device *, dev, u32_t, channel);",
        "K_SYSCALL_DMA_START",
        "[K_SYSCALL_DMA_START] = _handler_dma_start"
    ],
    [
        "dma.h",
        "_handler_dma_stop",
        "K_SYSCALL_DECLARE2(K_SYSCALL_DMA_STOP, dma_stop, int, struct device *, dev, u32_t, channel);",
        "K_SYSCALL_DMA_STOP",
        "[K_SYSCALL_DMA_STOP] = _handler_dma_stop"
    ],
    [
        "flash.h",
        "_handler_flash_read",
        "K_SYSCALL_DECLARE4(K_SYSCALL_FLASH_READ, flash_read, int, struct device *, dev, off_t, offset, void *, data, size_t, len);",
        "K_SYSCALL_FLASH_READ",
        "[K_SYSCALL_FLASH_READ] = _handler_flash_read"
    ],
    [
        "flash.h",
        "_handler_flash_write",
        "K_SYSCALL_DECLARE4(K_SYSCALL_FLASH_WRITE, flash_write, int, struct device *, dev, off_t, offset, const void *, data, size_t, len);",
        "K_SYSCALL_FLASH_WRITE",
        "[K_SYSCALL_FLASH_WRITE] = _handler_flash_write"
    ],
    [
        "flash.h",
        "_handler_flash_erase",
        "K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_ERASE, flash_erase, int, struct device *, dev, off_t, offset, size_t, size);",
        "K_SYSCALL_FLASH_ERASE",
        "[K_SYSCALL_FLASH_ERASE] = _handler_flash_erase"
    ],
    [
        "flash.h",
        "_handler_flash_write_protection_set",
        "K_SYSCALL_DECLARE2(K_SYSCALL_FLASH_WRITE_PROTECTION_SET, flash_write_protection_set, int, struct device *, dev, bool, enable);",
        "K_SYSCALL_FLASH_WRITE_PROTECTION_SET",
        "[K_SYSCALL_FLASH_WRITE_PROTECTION_SET] = _handler_flash_write_protection_set"
    ],
    [
        "flash.h",
        "_handler_flash_get_page_info_by_offs",
        "K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS, flash_get_page_info_by_offs, int, struct device *, dev, off_t, offset, struct flash_pages_info *, info);",
        "K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS",
        "[K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS] = _handler_flash_get_page_info_by_offs"
    ],
    [
        "flash.h",
        "_handler_flash_get_page_info_by_idx",
        "K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_GET_PAGE_INFO_BY_IDX, flash_get_page_info_by_idx, int, struct device *, dev, u32_t, page_index, struct flash_pages_info *, info);",
        "K_SYSCALL_FLASH_GET_PAGE_INFO_BY_IDX",
        "[K_SYSCALL_FLASH_GET_PAGE_INFO_BY_IDX] = _handler_flash_get_page_info_by_idx"
    ],
    [
        "flash.h",
        "_handler_flash_get_page_count",
        "K_SYSCALL_DECLARE1(K_SYSCALL_FLASH_GET_PAGE_COUNT, flash_get_page_count, size_t, struct device *, dev);",
        "K_SYSCALL_FLASH_GET_PAGE_COUNT",
        "[K_SYSCALL_FLASH_GET_PAGE_COUNT] = _handler_flash_get_page_count"
    ],
    [
        "flash.h",
        "_handler_flash_get_write_block_size",
        "K_SYSCALL_DECLARE1(K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE, flash_get_write_block_size, size_t, struct device *, dev);",
        "K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE",
        "[K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE] = _handler_flash_get_write_block_size"
    ],
    [
        "spi.h",
        "_handler_spi_transceive",
        "K_SYSCALL_DECLARE4(K_SYSCALL_SPI_TRANSCEIVE, spi_transceive, int, struct device *, dev, const struct spi_config *, config, const struct spi_buf_set *, tx_bufs, const struct spi_buf_set *, rx_bufs);",
        "K_SYSCALL_SPI_TRANSCEIVE",
        "[K_SYSCALL_SPI_TRANSCEIVE] = _handler_spi_transceive"
    ],
    [
        "spi.h",
        "_handler_spi_release",
        "K_SYSCALL_DECLARE2(K_SYSCALL_SPI_RELEASE, spi_release, int, struct device *, dev, const struct spi_config *, config);",
        "K_SYSCALL_SPI_RELEASE",
        "[K_SYSCALL_SPI_RELEASE] = _handler_spi_release"
    ],
    [
        "adc.h",
        "_handler_adc_enable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_ADC_ENABLE, adc_enable, struct device *, dev);",
        "K_SYSCALL_ADC_ENABLE",
        "[K_SYSCALL_ADC_ENABLE] = _handler_adc_enable"
    ],
    [
        "adc.h",
        "_handler_adc_disable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_ADC_DISABLE, adc_disable, struct device *, dev);",
        "K_SYSCALL_ADC_DISABLE",
        "[K_SYSCALL_ADC_DISABLE] = _handler_adc_disable"
    ],
    [
        "adc.h",
        "_handler_adc_read",
        "K_SYSCALL_DECLARE2(K_SYSCALL_ADC_READ, adc_read, int, struct device *, dev, struct adc_seq_table *, seq_table);",
        "K_SYSCALL_ADC_READ",
        "[K_SYSCALL_ADC_READ] = _handler_adc_read"
    ],
    [
        "rtc.h",
        "_handler_rtc_read",
        "K_SYSCALL_DECLARE1(K_SYSCALL_RTC_READ, rtc_read, u32_t, struct device *, dev);",
        "K_SYSCALL_RTC_READ",
        "[K_SYSCALL_RTC_READ] = _handler_rtc_read"
    ],
    [
        "rtc.h",
        "_handler_rtc_enable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_RTC_ENABLE, rtc_enable, struct device *, dev);",
        "K_SYSCALL_RTC_ENABLE",
        "[K_SYSCALL_RTC_ENABLE] = _handler_rtc_enable"
    ],
    [
        "rtc.h",
        "_handler_rtc_disable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_RTC_DISABLE, rtc_disable, struct device *, dev);",
        "K_SYSCALL_RTC_DISABLE",
        "[K_SYSCALL_RTC_DISABLE] = _handler_rtc_disable"
    ],
    [
        "rtc.h",
        "_handler_rtc_set_alarm",
        "K_SYSCALL_DECLARE2(K_SYSCALL_RTC_SET_ALARM, rtc_set_alarm, int, struct device *, dev, const u32_t, alarm_val);",
        "K_SYSCALL_RTC_SET_ALARM",
        "[K_SYSCALL_RTC_SET_ALARM] = _handler_rtc_set_alarm"
    ],
    [
        "rtc.h",
        "_handler_rtc_get_pending_int",
        "K_SYSCALL_DECLARE1(K_SYSCALL_RTC_GET_PENDING_INT, rtc_get_pending_int, int, struct device *, dev);",
        "K_SYSCALL_RTC_GET_PENDING_INT",
        "[K_SYSCALL_RTC_GET_PENDING_INT] = _handler_rtc_get_pending_int"
    ],
    [
        "can.h",
        "_handler_can_send",
        "K_SYSCALL_DECLARE4(K_SYSCALL_CAN_SEND, can_send, int, struct device *, dev, struct can_msg *, msg, s32_t, timeout, can_tx_callback_t, callback_isr);",
        "K_SYSCALL_CAN_SEND",
        "[K_SYSCALL_CAN_SEND] = _handler_can_send"
    ],
    [
        "can.h",
        "_handler_can_attach_msgq",
        "K_SYSCALL_DECLARE3(K_SYSCALL_CAN_ATTACH_MSGQ, can_attach_msgq, int, struct device *, dev, struct k_msgq *, msg_q, const struct can_filter *, filter);",
        "K_SYSCALL_CAN_ATTACH_MSGQ",
        "[K_SYSCALL_CAN_ATTACH_MSGQ] = _handler_can_attach_msgq"
    ],
    [
        "can.h",
        "_handler_can_attach_isr",
        "K_SYSCALL_DECLARE3(K_SYSCALL_CAN_ATTACH_ISR, can_attach_isr, int, struct device *, dev, can_rx_callback_t, isr, const struct can_filter *, filter);",
        "K_SYSCALL_CAN_ATTACH_ISR",
        "[K_SYSCALL_CAN_ATTACH_ISR] = _handler_can_attach_isr"
    ],
    [
        "can.h",
        "_handler_can_detach",
        "K_SYSCALL_DECLARE2_VOID(K_SYSCALL_CAN_DETACH, can_detach, struct device *, dev, int, filter_id);",
        "K_SYSCALL_CAN_DETACH",
        "[K_SYSCALL_CAN_DETACH] = _handler_can_detach"
    ],
    [
        "can.h",
        "_handler_can_configure",
        "K_SYSCALL_DECLARE3(K_SYSCALL_CAN_CONFIGURE, can_configure, int, struct device *, dev, enum can_mode, mode, u32_t, bitrate);",
        "K_SYSCALL_CAN_CONFIGURE",
        "[K_SYSCALL_CAN_CONFIGURE] = _handler_can_configure"
    ],
    [
        "ipm.h",
        "_handler_ipm_send",
        "K_SYSCALL_DECLARE5(K_SYSCALL_IPM_SEND, ipm_send, int, struct device *, ipmdev, int, wait, u32_t, id, const void *, data, int, size);",
        "K_SYSCALL_IPM_SEND",
        "[K_SYSCALL_IPM_SEND] = _handler_ipm_send"
    ],
    [
        "ipm.h",
        "_handler_ipm_max_data_size_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_IPM_MAX_DATA_SIZE_GET, ipm_max_data_size_get, int, struct device *, ipmdev);",
        "K_SYSCALL_IPM_MAX_DATA_SIZE_GET",
        "[K_SYSCALL_IPM_MAX_DATA_SIZE_GET] = _handler_ipm_max_data_size_get"
    ],
    [
        "ipm.h",
        "_handler_ipm_max_id_val_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_IPM_MAX_ID_VAL_GET, ipm_max_id_val_get, u32_t, struct device *, ipmdev);",
        "K_SYSCALL_IPM_MAX_ID_VAL_GET",
        "[K_SYSCALL_IPM_MAX_ID_VAL_GET] = _handler_ipm_max_id_val_get"
    ],
    [
        "ipm.h",
        "_handler_ipm_set_enabled",
        "K_SYSCALL_DECLARE2(K_SYSCALL_IPM_SET_ENABLED, ipm_set_enabled, int, struct device *, ipmdev, int, enable);",
        "K_SYSCALL_IPM_SET_ENABLED",
        "[K_SYSCALL_IPM_SET_ENABLED] = _handler_ipm_set_enabled"
    ],
    [
        "led.h",
        "_handler_led_blink",
        "K_SYSCALL_DECLARE4(K_SYSCALL_LED_BLINK, led_blink, int, struct device *, dev, u32_t, led, u32_t, delay_on, u32_t, delay_off);",
        "K_SYSCALL_LED_BLINK",
        "[K_SYSCALL_LED_BLINK] = _handler_led_blink"
    ],
    [
        "led.h",
        "_handler_led_set_brightness",
        "K_SYSCALL_DECLARE3(K_SYSCALL_LED_SET_BRIGHTNESS, led_set_brightness, int, struct device *, dev, u32_t, led, u8_t, value);",
        "K_SYSCALL_LED_SET_BRIGHTNESS",
        "[K_SYSCALL_LED_SET_BRIGHTNESS] = _handler_led_set_brightness"
    ],
    [
        "led.h",
        "_handler_led_on",
        "K_SYSCALL_DECLARE2(K_SYSCALL_LED_ON, led_on, int, struct device *, dev, u32_t, led);",
        "K_SYSCALL_LED_ON",
        "[K_SYSCALL_LED_ON] = _handler_led_on"
    ],
    [
        "led.h",
        "_handler_led_off",
        "K_SYSCALL_DECLARE2(K_SYSCALL_LED_OFF, led_off, int, struct device *, dev, u32_t, led);",
        "K_SYSCALL_LED_OFF",
        "[K_SYSCALL_LED_OFF] = _handler_led_off"
    ],
    [
        "aio_comparator.h",
        "_handler_aio_cmp_disable",
        "K_SYSCALL_DECLARE2(K_SYSCALL_AIO_CMP_DISABLE, aio_cmp_disable, int, struct device *, dev, u8_t, index);",
        "K_SYSCALL_AIO_CMP_DISABLE",
        "[K_SYSCALL_AIO_CMP_DISABLE] = _handler_aio_cmp_disable"
    ],
    [
        "aio_comparator.h",
        "_handler_aio_cmp_get_pending_int",
        "K_SYSCALL_DECLARE1(K_SYSCALL_AIO_CMP_GET_PENDING_INT, aio_cmp_get_pending_int, int, struct device *, dev);",
        "K_SYSCALL_AIO_CMP_GET_PENDING_INT",
        "[K_SYSCALL_AIO_CMP_GET_PENDING_INT] = _handler_aio_cmp_get_pending_int"
    ],
    [
        "sensor.h",
        "_handler_sensor_attr_set",
        "K_SYSCALL_DECLARE4(K_SYSCALL_SENSOR_ATTR_SET, sensor_attr_set, int, struct device *, dev, enum sensor_channel, chan, enum sensor_attribute, attr, const struct sensor_value *, val);",
        "K_SYSCALL_SENSOR_ATTR_SET",
        "[K_SYSCALL_SENSOR_ATTR_SET] = _handler_sensor_attr_set"
    ],
    [
        "sensor.h",
        "_handler_sensor_sample_fetch",
        "K_SYSCALL_DECLARE1(K_SYSCALL_SENSOR_SAMPLE_FETCH, sensor_sample_fetch, int, struct device *, dev);",
        "K_SYSCALL_SENSOR_SAMPLE_FETCH",
        "[K_SYSCALL_SENSOR_SAMPLE_FETCH] = _handler_sensor_sample_fetch"
    ],
    [
        "sensor.h",
        "_handler_sensor_sample_fetch_chan",
        "K_SYSCALL_DECLARE2(K_SYSCALL_SENSOR_SAMPLE_FETCH_CHAN, sensor_sample_fetch_chan, int, struct device *, dev, enum sensor_channel, type);",
        "K_SYSCALL_SENSOR_SAMPLE_FETCH_CHAN",
        "[K_SYSCALL_SENSOR_SAMPLE_FETCH_CHAN] = _handler_sensor_sample_fetch_chan"
    ],
    [
        "sensor.h",
        "_handler_sensor_channel_get",
        "K_SYSCALL_DECLARE3(K_SYSCALL_SENSOR_CHANNEL_GET, sensor_channel_get, int, struct device *, dev, enum sensor_channel, chan, struct sensor_value *, val);",
        "K_SYSCALL_SENSOR_CHANNEL_GET",
        "[K_SYSCALL_SENSOR_CHANNEL_GET] = _handler_sensor_channel_get"
    ],
    [
        "gpio.h",
        "_handler_gpio_config",
        "K_SYSCALL_DECLARE4(K_SYSCALL_GPIO_CONFIG, gpio_config, int, struct device *, port, int, access_op, u32_t, pin, int, flags);",
        "K_SYSCALL_GPIO_CONFIG",
        "[K_SYSCALL_GPIO_CONFIG] = _handler_gpio_config"
    ],
    [
        "gpio.h",
        "_handler_gpio_write",
        "K_SYSCALL_DECLARE4(K_SYSCALL_GPIO_WRITE, gpio_write, int, struct device *, port, int, access_op, u32_t, pin, u32_t, value);",
        "K_SYSCALL_GPIO_WRITE",
        "[K_SYSCALL_GPIO_WRITE] = _handler_gpio_write"
    ],
    [
        "gpio.h",
        "_handler_gpio_read",
        "K_SYSCALL_DECLARE4(K_SYSCALL_GPIO_READ, gpio_read, int, struct device *, port, int, access_op, u32_t, pin, u32_t *, value);",
        "K_SYSCALL_GPIO_READ",
        "[K_SYSCALL_GPIO_READ] = _handler_gpio_read"
    ],
    [
        "gpio.h",
        "_handler_gpio_enable_callback",
        "K_SYSCALL_DECLARE3(K_SYSCALL_GPIO_ENABLE_CALLBACK, gpio_enable_callback, int, struct device *, port, int, access_op, u32_t, pin);",
        "K_SYSCALL_GPIO_ENABLE_CALLBACK",
        "[K_SYSCALL_GPIO_ENABLE_CALLBACK] = _handler_gpio_enable_callback"
    ],
    [
        "gpio.h",
        "_handler_gpio_disable_callback",
        "K_SYSCALL_DECLARE3(K_SYSCALL_GPIO_DISABLE_CALLBACK, gpio_disable_callback, int, struct device *, port, int, access_op, u32_t, pin);",
        "K_SYSCALL_GPIO_DISABLE_CALLBACK",
        "[K_SYSCALL_GPIO_DISABLE_CALLBACK] = _handler_gpio_disable_callback"
    ],
    [
        "gpio.h",
        "_handler_gpio_get_pending_int",
        "K_SYSCALL_DECLARE1(K_SYSCALL_GPIO_GET_PENDING_INT, gpio_get_pending_int, int, struct device *, dev);",
        "K_SYSCALL_GPIO_GET_PENDING_INT",
        "[K_SYSCALL_GPIO_GET_PENDING_INT] = _handler_gpio_get_pending_int"
    ],
    [
        "i2c.h",
        "_handler_i2c_configure",
        "K_SYSCALL_DECLARE2(K_SYSCALL_I2C_CONFIGURE, i2c_configure, int, struct device *, dev, u32_t, dev_config);",
        "K_SYSCALL_I2C_CONFIGURE",
        "[K_SYSCALL_I2C_CONFIGURE] = _handler_i2c_configure"
    ],
    [
        "i2c.h",
        "_handler_i2c_transfer",
        "K_SYSCALL_DECLARE4(K_SYSCALL_I2C_TRANSFER, i2c_transfer, int, struct device *, dev, struct i2c_msg *, msgs, u8_t, num_msgs, u16_t, addr);",
        "K_SYSCALL_I2C_TRANSFER",
        "[K_SYSCALL_I2C_TRANSFER] = _handler_i2c_transfer"
    ],
    [
        "pwm.h",
        "_handler_pwm_pin_set_cycles",
        "K_SYSCALL_DECLARE4(K_SYSCALL_PWM_PIN_SET_CYCLES, pwm_pin_set_cycles, int, struct device *, dev, u32_t, pwm, u32_t, period, u32_t, pulse);",
        "K_SYSCALL_PWM_PIN_SET_CYCLES",
        "[K_SYSCALL_PWM_PIN_SET_CYCLES] = _handler_pwm_pin_set_cycles"
    ],
    [
        "pwm.h",
        "_handler_pwm_get_cycles_per_sec",
        "K_SYSCALL_DECLARE3(K_SYSCALL_PWM_GET_CYCLES_PER_SEC, pwm_get_cycles_per_sec, int, struct device *, dev, u32_t, pwm, u64_t *, cycles);",
        "K_SYSCALL_PWM_GET_CYCLES_PER_SEC",
        "[K_SYSCALL_PWM_GET_CYCLES_PER_SEC] = _handler_pwm_get_cycles_per_sec"
    ],
    [
        "entropy.h",
        "_handler_entropy_get_entropy",
        "K_SYSCALL_DECLARE3(K_SYSCALL_ENTROPY_GET_ENTROPY, entropy_get_entropy, int, struct device *, dev, u8_t *, buffer, u16_t, length);",
        "K_SYSCALL_ENTROPY_GET_ENTROPY",
        "[K_SYSCALL_ENTROPY_GET_ENTROPY] = _handler_entropy_get_entropy"
    ],
    [
        "uart.h",
        "_handler_uart_err_check",
        "K_SYSCALL_DECLARE1(K_SYSCALL_UART_ERR_CHECK, uart_err_check, int, struct device *, dev);",
        "K_SYSCALL_UART_ERR_CHECK",
        "[K_SYSCALL_UART_ERR_CHECK] = _handler_uart_err_check"
    ],
    [
        "uart.h",
        "_handler_uart_poll_in",
        "K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_IN, uart_poll_in, int, struct device *, dev, unsigned char *, p_char);",
        "K_SYSCALL_UART_POLL_IN",
        "[K_SYSCALL_UART_POLL_IN] = _handler_uart_poll_in"
    ],
    [
        "uart.h",
        "_handler_uart_poll_out",
        "K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_OUT, uart_poll_out, unsigned char, struct device *, dev, unsigned char, out_char);",
        "K_SYSCALL_UART_POLL_OUT",
        "[K_SYSCALL_UART_POLL_OUT] = _handler_uart_poll_out"
    ],
    [
        "uart.h",
        "_handler_uart_irq_tx_enable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev);",
        "K_SYSCALL_UART_IRQ_TX_ENABLE",
        "[K_SYSCALL_UART_IRQ_TX_ENABLE] = _handler_uart_irq_tx_enable"
    ],
    [
        "uart.h",
        "_handler_uart_irq_tx_disable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev);",
        "K_SYSCALL_UART_IRQ_TX_DISABLE",
        "[K_SYSCALL_UART_IRQ_TX_DISABLE] = _handler_uart_irq_tx_disable"
    ],
    [
        "uart.h",
        "_handler_uart_irq_rx_enable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev);",
        "K_SYSCALL_UART_IRQ_RX_ENABLE",
        "[K_SYSCALL_UART_IRQ_RX_ENABLE] = _handler_uart_irq_rx_enable"
    ],
    [
        "uart.h",
        "_handler_uart_irq_rx_disable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev);",
        "K_SYSCALL_UART_IRQ_RX_DISABLE",
        "[K_SYSCALL_UART_IRQ_RX_DISABLE] = _handler_uart_irq_rx_disable"
    ],
    [
        "uart.h",
        "_handler_uart_irq_err_enable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_ERR_ENABLE, uart_irq_err_enable, struct device *, dev);",
        "K_SYSCALL_UART_IRQ_ERR_ENABLE",
        "[K_SYSCALL_UART_IRQ_ERR_ENABLE] = _handler_uart_irq_err_enable"
    ],
    [
        "uart.h",
        "_handler_uart_irq_err_disable",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_ERR_DISABLE, uart_irq_err_disable, struct device *, dev);",
        "K_SYSCALL_UART_IRQ_ERR_DISABLE",
        "[K_SYSCALL_UART_IRQ_ERR_DISABLE] = _handler_uart_irq_err_disable"
    ],
    [
        "uart.h",
        "_handler_uart_irq_is_pending",
        "K_SYSCALL_DECLARE1(K_SYSCALL_UART_IRQ_IS_PENDING, uart_irq_is_pending, int, struct device *, dev);",
        "K_SYSCALL_UART_IRQ_IS_PENDING",
        "[K_SYSCALL_UART_IRQ_IS_PENDING] = _handler_uart_irq_is_pending"
    ],
    [
        "uart.h",
        "_handler_uart_irq_update",
        "K_SYSCALL_DECLARE1(K_SYSCALL_UART_IRQ_UPDATE, uart_irq_update, int, struct device *, dev);",
        "K_SYSCALL_UART_IRQ_UPDATE",
        "[K_SYSCALL_UART_IRQ_UPDATE] = _handler_uart_irq_update"
    ],
    [
        "uart.h",
        "_handler_uart_line_ctrl_set",
        "K_SYSCALL_DECLARE3(K_SYSCALL_UART_LINE_CTRL_SET, uart_line_ctrl_set, int, struct device *, dev, u32_t, ctrl, u32_t, val);",
        "K_SYSCALL_UART_LINE_CTRL_SET",
        "[K_SYSCALL_UART_LINE_CTRL_SET] = _handler_uart_line_ctrl_set"
    ],
    [
        "uart.h",
        "_handler_uart_line_ctrl_get",
        "K_SYSCALL_DECLARE3(K_SYSCALL_UART_LINE_CTRL_GET, uart_line_ctrl_get, int, struct device *, dev, u32_t, ctrl, u32_t *, val);",
        "K_SYSCALL_UART_LINE_CTRL_GET",
        "[K_SYSCALL_UART_LINE_CTRL_GET] = _handler_uart_line_ctrl_get"
    ],
    [
        "uart.h",
        "_handler_uart_drv_cmd",
        "K_SYSCALL_DECLARE3(K_SYSCALL_UART_DRV_CMD, uart_drv_cmd, int, struct device *, dev, u32_t, cmd, u32_t, p);",
        "K_SYSCALL_UART_DRV_CMD",
        "[K_SYSCALL_UART_DRV_CMD] = _handler_uart_drv_cmd"
    ],
    [
        "counter.h",
        "_handler_counter_start",
        "K_SYSCALL_DECLARE1(K_SYSCALL_COUNTER_START, counter_start, int, struct device *, dev);",
        "K_SYSCALL_COUNTER_START",
        "[K_SYSCALL_COUNTER_START] = _handler_counter_start"
    ],
    [
        "counter.h",
        "_handler_counter_stop",
        "K_SYSCALL_DECLARE1(K_SYSCALL_COUNTER_STOP, counter_stop, int, struct device *, dev);",
        "K_SYSCALL_COUNTER_STOP",
        "[K_SYSCALL_COUNTER_STOP] = _handler_counter_stop"
    ],
    [
        "counter.h",
        "_handler_counter_read",
        "K_SYSCALL_DECLARE1(K_SYSCALL_COUNTER_READ, counter_read, u32_t, struct device *, dev);",
        "K_SYSCALL_COUNTER_READ",
        "[K_SYSCALL_COUNTER_READ] = _handler_counter_read"
    ],
    [
        "counter.h",
        "_handler_counter_get_pending_int",
        "K_SYSCALL_DECLARE1(K_SYSCALL_COUNTER_GET_PENDING_INT, counter_get_pending_int, int, struct device *, dev);",
        "K_SYSCALL_COUNTER_GET_PENDING_INT",
        "[K_SYSCALL_COUNTER_GET_PENDING_INT] = _handler_counter_get_pending_int"
    ],
    [
        "kernel.h",
        "_handler_k_object_access_grant",
        "K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_GRANT, k_object_access_grant, void *, object, struct k_thread *, thread);",
        "K_SYSCALL_K_OBJECT_ACCESS_GRANT",
        "[K_SYSCALL_K_OBJECT_ACCESS_GRANT] = _handler_k_object_access_grant"
    ],
    [
        "kernel.h",
        "_handler_k_object_release",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_OBJECT_RELEASE, k_object_release, void *, object);",
        "K_SYSCALL_K_OBJECT_RELEASE",
        "[K_SYSCALL_K_OBJECT_RELEASE] = _handler_k_object_release"
    ],
    [
        "kernel.h",
        "_handler_k_object_alloc",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype);",
        "K_SYSCALL_K_OBJECT_ALLOC",
        "[K_SYSCALL_K_OBJECT_ALLOC] = _handler_k_object_alloc"
    ],
    [
        "kernel.h",
        "_handler_k_thread_create",
        "K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);",
        "K_SYSCALL_K_THREAD_CREATE",
        "[K_SYSCALL_K_THREAD_CREATE] = _handler_k_thread_create"
    ],
    [
        "kernel.h",
        "_handler_k_sleep",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);",
        "K_SYSCALL_K_SLEEP",
        "[K_SYSCALL_K_SLEEP] = _handler_k_sleep"
    ],
    [
        "kernel.h",
        "_handler_k_yield",
        "K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);",
        "K_SYSCALL_K_YIELD",
        "[K_SYSCALL_K_YIELD] = _handler_k_yield"
    ],
    [
        "kernel.h",
        "_handler_k_wakeup",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);",
        "K_SYSCALL_K_WAKEUP",
        "[K_SYSCALL_K_WAKEUP] = _handler_k_wakeup"
    ],
    [
        "kernel.h",
        "_handler_k_current_get",
        "K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);",
        "K_SYSCALL_K_CURRENT_GET",
        "[K_SYSCALL_K_CURRENT_GET] = _handler_k_current_get"
    ],
    [
        "kernel.h",
        "_handler_k_thread_cancel",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);",
        "K_SYSCALL_K_THREAD_CANCEL",
        "[K_SYSCALL_K_THREAD_CANCEL] = _handler_k_thread_cancel"
    ],
    [
        "kernel.h",
        "_handler_k_thread_abort",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);",
        "K_SYSCALL_K_THREAD_ABORT",
        "[K_SYSCALL_K_THREAD_ABORT] = _handler_k_thread_abort"
    ],
    [
        "kernel.h",
        "_handler_k_thread_start",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);",
        "K_SYSCALL_K_THREAD_START",
        "[K_SYSCALL_K_THREAD_START] = _handler_k_thread_start"
    ],
    [
        "kernel.h",
        "_handler_k_thread_priority_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_PRIORITY_GET, k_thread_priority_get, int, k_tid_t, thread);",
        "K_SYSCALL_K_THREAD_PRIORITY_GET",
        "[K_SYSCALL_K_THREAD_PRIORITY_GET] = _handler_k_thread_priority_get"
    ],
    [
        "kernel.h",
        "_handler_k_thread_priority_set",
        "K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_PRIORITY_SET, k_thread_priority_set, k_tid_t, thread, int, prio);",
        "K_SYSCALL_K_THREAD_PRIORITY_SET",
        "[K_SYSCALL_K_THREAD_PRIORITY_SET] = _handler_k_thread_priority_set"
    ],
    [
        "kernel.h",
        "_handler_k_thread_deadline_set",
        "K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_DEADLINE_SET, k_thread_deadline_set, k_tid_t, thread, int, deadline);",
        "K_SYSCALL_K_THREAD_DEADLINE_SET",
        "[K_SYSCALL_K_THREAD_DEADLINE_SET] = _handler_k_thread_deadline_set"
    ],
    [
        "kernel.h",
        "_handler_k_thread_suspend",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_SUSPEND, k_thread_suspend, k_tid_t, thread);",
        "K_SYSCALL_K_THREAD_SUSPEND",
        "[K_SYSCALL_K_THREAD_SUSPEND] = _handler_k_thread_suspend"
    ],
    [
        "kernel.h",
        "_handler_k_thread_resume",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_RESUME, k_thread_resume, k_tid_t, thread);",
        "K_SYSCALL_K_THREAD_RESUME",
        "[K_SYSCALL_K_THREAD_RESUME] = _handler_k_thread_resume"
    ],
    [
        "kernel.h",
        "_handler_k_is_preempt_thread",
        "K_SYSCALL_DECLARE0(K_SYSCALL_K_IS_PREEMPT_THREAD, k_is_preempt_thread, int);",
        "K_SYSCALL_K_IS_PREEMPT_THREAD",
        "[K_SYSCALL_K_IS_PREEMPT_THREAD] = _handler_k_is_preempt_thread"
    ],
    [
        "kernel.h",
        "_handler_k_thread_custom_data_set",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_CUSTOM_DATA_SET, k_thread_custom_data_set, void *, value);",
        "K_SYSCALL_K_THREAD_CUSTOM_DATA_SET",
        "[K_SYSCALL_K_THREAD_CUSTOM_DATA_SET] = _handler_k_thread_custom_data_set"
    ],
    [
        "kernel.h",
        "_handler_k_thread_custom_data_get",
        "K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *);",
        "K_SYSCALL_K_THREAD_CUSTOM_DATA_GET",
        "[K_SYSCALL_K_THREAD_CUSTOM_DATA_GET] = _handler_k_thread_custom_data_get"
    ],
    [
        "kernel.h",
        "_handler_k_timer_start",
        "K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);",
        "K_SYSCALL_K_TIMER_START",
        "[K_SYSCALL_K_TIMER_START] = _handler_k_timer_start"
    ],
    [
        "kernel.h",
        "_handler_k_timer_stop",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);",
        "K_SYSCALL_K_TIMER_STOP",
        "[K_SYSCALL_K_TIMER_STOP] = _handler_k_timer_stop"
    ],
    [
        "kernel.h",
        "_handler_k_timer_status_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_STATUS_GET, k_timer_status_get, u32_t, struct k_timer *, timer);",
        "K_SYSCALL_K_TIMER_STATUS_GET",
        "[K_SYSCALL_K_TIMER_STATUS_GET] = _handler_k_timer_status_get"
    ],
    [
        "kernel.h",
        "_handler_k_timer_status_sync",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_STATUS_SYNC, k_timer_status_sync, u32_t, struct k_timer *, timer);",
        "K_SYSCALL_K_TIMER_STATUS_SYNC",
        "[K_SYSCALL_K_TIMER_STATUS_SYNC] = _handler_k_timer_status_sync"
    ],
    [
        "kernel.h",
        "_handler_k_timer_remaining_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_REMAINING_GET, k_timer_remaining_get, s32_t, struct k_timer *, timer);",
        "K_SYSCALL_K_TIMER_REMAINING_GET",
        "[K_SYSCALL_K_TIMER_REMAINING_GET] = _handler_k_timer_remaining_get"
    ],
    [
        "kernel.h",
        "_handler_k_timer_user_data_set",
        "K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_TIMER_USER_DATA_SET, k_timer_user_data_set, struct k_timer *, timer, void *, user_data);",
        "K_SYSCALL_K_TIMER_USER_DATA_SET",
        "[K_SYSCALL_K_TIMER_USER_DATA_SET] = _handler_k_timer_user_data_set"
    ],
    [
        "kernel.h",
        "_handler_k_timer_user_data_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer);",
        "K_SYSCALL_K_TIMER_USER_DATA_GET",
        "[K_SYSCALL_K_TIMER_USER_DATA_GET] = _handler_k_timer_user_data_get"
    ],
    [
        "kernel.h",
        "_handler_k_uptime_get",
        "K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);",
        "K_SYSCALL_K_UPTIME_GET",
        "[K_SYSCALL_K_UPTIME_GET] = _handler_k_uptime_get"
    ],
    [
        "kernel.h",
        "_handler_k_uptime_get_32",
        "K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);",
        "K_SYSCALL_K_UPTIME_GET_32",
        "[K_SYSCALL_K_UPTIME_GET_32] = _handler_k_uptime_get_32"
    ],
    [
        "kernel.h",
        "_handler_k_queue_init",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);",
        "K_SYSCALL_K_QUEUE_INIT",
        "[K_SYSCALL_K_QUEUE_INIT] = _handler_k_queue_init"
    ],
    [
        "kernel.h",
        "_handler_k_queue_cancel_wait",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_CANCEL_WAIT, k_queue_cancel_wait, struct k_queue *, queue);",
        "K_SYSCALL_K_QUEUE_CANCEL_WAIT",
        "[K_SYSCALL_K_QUEUE_CANCEL_WAIT] = _handler_k_queue_cancel_wait"
    ],
    [
        "kernel.h",
        "_handler_k_queue_alloc_append",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_ALLOC_APPEND, k_queue_alloc_append, int, struct k_queue *, queue, void *, data);",
        "K_SYSCALL_K_QUEUE_ALLOC_APPEND",
        "[K_SYSCALL_K_QUEUE_ALLOC_APPEND] = _handler_k_queue_alloc_append"
    ],
    [
        "kernel.h",
        "_handler_k_queue_alloc_prepend",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_ALLOC_PREPEND, k_queue_alloc_prepend, int, struct k_queue *, queue, void *, data);",
        "K_SYSCALL_K_QUEUE_ALLOC_PREPEND",
        "[K_SYSCALL_K_QUEUE_ALLOC_PREPEND] = _handler_k_queue_alloc_prepend"
    ],
    [
        "kernel.h",
        "_handler_k_queue_get",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);",
        "K_SYSCALL_K_QUEUE_GET",
        "[K_SYSCALL_K_QUEUE_GET] = _handler_k_queue_get"
    ],
    [
        "kernel.h",
        "_handler_k_queue_is_empty",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_IS_EMPTY, k_queue_is_empty, int, struct k_queue *, queue);",
        "K_SYSCALL_K_QUEUE_IS_EMPTY",
        "[K_SYSCALL_K_QUEUE_IS_EMPTY] = _handler_k_queue_is_empty"
    ],
    [
        "kernel.h",
        "_handler_k_queue_peek_head",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_PEEK_HEAD, k_queue_peek_head, void *, struct k_queue *, queue);",
        "K_SYSCALL_K_QUEUE_PEEK_HEAD",
        "[K_SYSCALL_K_QUEUE_PEEK_HEAD] = _handler_k_queue_peek_head"
    ],
    [
        "kernel.h",
        "_handler_k_queue_peek_tail",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_QUEUE_PEEK_TAIL, k_queue_peek_tail, void *, struct k_queue *, queue);",
        "K_SYSCALL_K_QUEUE_PEEK_TAIL",
        "[K_SYSCALL_K_QUEUE_PEEK_TAIL] = _handler_k_queue_peek_tail"
    ],
    [
        "kernel.h",
        "_handler_k_stack_alloc_init",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_STACK_ALLOC_INIT, k_stack_alloc_init, int, struct k_stack *, stack, unsigned int, num_entries);",
        "K_SYSCALL_K_STACK_ALLOC_INIT",
        "[K_SYSCALL_K_STACK_ALLOC_INIT] = _handler_k_stack_alloc_init"
    ],
    [
        "kernel.h",
        "_handler_k_stack_push",
        "K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_STACK_PUSH, k_stack_push, struct k_stack *, stack, u32_t, data);",
        "K_SYSCALL_K_STACK_PUSH",
        "[K_SYSCALL_K_STACK_PUSH] = _handler_k_stack_push"
    ],
    [
        "kernel.h",
        "_handler_k_stack_pop",
        "K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout);",
        "K_SYSCALL_K_STACK_POP",
        "[K_SYSCALL_K_STACK_POP] = _handler_k_stack_pop"
    ],
    [
        "kernel.h",
        "_handler_k_mutex_init",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);",
        "K_SYSCALL_K_MUTEX_INIT",
        "[K_SYSCALL_K_MUTEX_INIT] = _handler_k_mutex_init"
    ],
    [
        "kernel.h",
        "_handler_k_mutex_lock",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);",
        "K_SYSCALL_K_MUTEX_LOCK",
        "[K_SYSCALL_K_MUTEX_LOCK] = _handler_k_mutex_lock"
    ],
    [
        "kernel.h",
        "_handler_k_mutex_unlock",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);",
        "K_SYSCALL_K_MUTEX_UNLOCK",
        "[K_SYSCALL_K_MUTEX_UNLOCK] = _handler_k_mutex_unlock"
    ],
    [
        "kernel.h",
        "_handler_k_sem_init",
        "K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);",
        "K_SYSCALL_K_SEM_INIT",
        "[K_SYSCALL_K_SEM_INIT] = _handler_k_sem_init"
    ],
    [
        "kernel.h",
        "_handler_k_sem_take",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);",
        "K_SYSCALL_K_SEM_TAKE",
        "[K_SYSCALL_K_SEM_TAKE] = _handler_k_sem_take"
    ],
    [
        "kernel.h",
        "_handler_k_sem_give",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);",
        "K_SYSCALL_K_SEM_GIVE",
        "[K_SYSCALL_K_SEM_GIVE] = _handler_k_sem_give"
    ],
    [
        "kernel.h",
        "_handler_k_sem_reset",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_RESET, k_sem_reset, struct k_sem *, sem);",
        "K_SYSCALL_K_SEM_RESET",
        "[K_SYSCALL_K_SEM_RESET] = _handler_k_sem_reset"
    ],
    [
        "kernel.h",
        "_handler_k_sem_count_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem);",
        "K_SYSCALL_K_SEM_COUNT_GET",
        "[K_SYSCALL_K_SEM_COUNT_GET] = _handler_k_sem_count_get"
    ],
    [
        "kernel.h",
        "_handler_k_alert_recv",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_ALERT_RECV, k_alert_recv, int, struct k_alert *, alert, s32_t, timeout);",
        "K_SYSCALL_K_ALERT_RECV",
        "[K_SYSCALL_K_ALERT_RECV] = _handler_k_alert_recv"
    ],
    [
        "kernel.h",
        "_handler_k_alert_send",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_ALERT_SEND, k_alert_send, struct k_alert *, alert);",
        "K_SYSCALL_K_ALERT_SEND",
        "[K_SYSCALL_K_ALERT_SEND] = _handler_k_alert_send"
    ],
    [
        "kernel.h",
        "_handler_k_msgq_alloc_init",
        "K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_ALLOC_INIT, k_msgq_alloc_init, int, struct k_msgq *, q, size_t, msg_size, u32_t, max_msgs);",
        "K_SYSCALL_K_MSGQ_ALLOC_INIT",
        "[K_SYSCALL_K_MSGQ_ALLOC_INIT] = _handler_k_msgq_alloc_init"
    ],
    [
        "kernel.h",
        "_handler_k_msgq_put",
        "K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout);",
        "K_SYSCALL_K_MSGQ_PUT",
        "[K_SYSCALL_K_MSGQ_PUT] = _handler_k_msgq_put"
    ],
    [
        "kernel.h",
        "_handler_k_msgq_get",
        "K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_GET, k_msgq_get, int, struct k_msgq *, q, void *, data, s32_t, timeout);",
        "K_SYSCALL_K_MSGQ_GET",
        "[K_SYSCALL_K_MSGQ_GET] = _handler_k_msgq_get"
    ],
    [
        "kernel.h",
        "_handler_k_msgq_purge",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MSGQ_PURGE, k_msgq_purge, struct k_msgq *, q);",
        "K_SYSCALL_K_MSGQ_PURGE",
        "[K_SYSCALL_K_MSGQ_PURGE] = _handler_k_msgq_purge"
    ],
    [
        "kernel.h",
        "_handler_k_msgq_num_free_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_MSGQ_NUM_FREE_GET, k_msgq_num_free_get, u32_t, struct k_msgq *, q);",
        "K_SYSCALL_K_MSGQ_NUM_FREE_GET",
        "[K_SYSCALL_K_MSGQ_NUM_FREE_GET] = _handler_k_msgq_num_free_get"
    ],
    [
        "kernel.h",
        "_handler_k_msgq_get_attrs",
        "K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_MSGQ_GET_ATTRS, k_msgq_get_attrs, struct k_msgq *, q, struct k_msgq_attrs *, attrs);",
        "K_SYSCALL_K_MSGQ_GET_ATTRS",
        "[K_SYSCALL_K_MSGQ_GET_ATTRS] = _handler_k_msgq_get_attrs"
    ],
    [
        "kernel.h",
        "_handler_k_msgq_num_used_get",
        "K_SYSCALL_DECLARE1(K_SYSCALL_K_MSGQ_NUM_USED_GET, k_msgq_num_used_get, u32_t, struct k_msgq *, q);",
        "K_SYSCALL_K_MSGQ_NUM_USED_GET",
        "[K_SYSCALL_K_MSGQ_NUM_USED_GET] = _handler_k_msgq_num_used_get"
    ],
    [
        "kernel.h",
        "_handler_k_pipe_alloc_init",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_PIPE_ALLOC_INIT, k_pipe_alloc_init, int, struct k_pipe *, pipe, size_t, size);",
        "K_SYSCALL_K_PIPE_ALLOC_INIT",
        "[K_SYSCALL_K_PIPE_ALLOC_INIT] = _handler_k_pipe_alloc_init"
    ],
    [
        "kernel.h",
        "_handler_k_pipe_put",
        "K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);",
        "K_SYSCALL_K_PIPE_PUT",
        "[K_SYSCALL_K_PIPE_PUT] = _handler_k_pipe_put"
    ],
    [
        "kernel.h",
        "_handler_k_pipe_get",
        "K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);",
        "K_SYSCALL_K_PIPE_GET",
        "[K_SYSCALL_K_PIPE_GET] = _handler_k_pipe_get"
    ],
    [
        "kernel.h",
        "_handler_k_poll",
        "K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);",
        "K_SYSCALL_K_POLL",
        "[K_SYSCALL_K_POLL] = _handler_k_poll"
    ],
    [
        "kernel.h",
        "_handler_k_poll_signal_init",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_INIT, k_poll_signal_init, struct k_poll_signal *, signal);",
        "K_SYSCALL_K_POLL_SIGNAL_INIT",
        "[K_SYSCALL_K_POLL_SIGNAL_INIT] = _handler_k_poll_signal_init"
    ],
    [
        "kernel.h",
        "_handler_k_poll_signal_reset",
        "K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);",
        "K_SYSCALL_K_POLL_SIGNAL_RESET",
        "[K_SYSCALL_K_POLL_SIGNAL_RESET] = _handler_k_poll_signal_reset"
    ],
    [
        "kernel.h",
        "_handler_k_poll_signal_check",
        "K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);",
        "K_SYSCALL_K_POLL_SIGNAL_CHECK",
        "[K_SYSCALL_K_POLL_SIGNAL_CHECK] = _handler_k_poll_signal_check"
    ],
    [
        "kernel.h",
        "_handler_k_poll_signal",
        "K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);",
        "K_SYSCALL_K_POLL_SIGNAL",
        "[K_SYSCALL_K_POLL_SIGNAL] = _handler_k_poll_signal"
    ],
    [
        "kernel.h",
        "_handler_k_str_out",
        "K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_STR_OUT, k_str_out, char *, c, size_t, n);",
        "K_SYSCALL_K_STR_OUT",
        "[K_SYSCALL_K_STR_OUT] = _handler_k_str_out"
    ]
]